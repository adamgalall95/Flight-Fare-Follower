Makes new branch
	git branch <branchName>
Switches branch
	git checkout <branchName>

To make sure everything is commited
	git status 

Add -> Commit -> Push -> Accept the pull request

Workflow
	On the branch 
		git add .
		git commit -m "This is where the comment goes"
	To view the logs
		git log
MAKE SURE main is checked out (git checkout main) before merging
	Merging the branch when feature is done
		git merge <featureBranchName> -m "Merging comments"
	THEN check the logs again to make sure
		git log

Merge Conflicts - the necessity for Pull Requests

HEAD points to current branch

Code reviews
	1. Create the feature branch
		git branch featureBranch
		git checkout featureBranch
		git log (to make sure HEAD = featureBranch)
	2. Upload the git to Github
		git add . 
		git commit -m "This is the branch update message"
		git push origin master
		git checkout featureBranch
		git push origin featureBranch (then check github to make sure it uploaded)
	3. Create a "Pull Request"
		1. Go to pull requests tab
		2. Base is master, Compare is the relevant branch you were working on
		3. Add a message with the changes made functionally
	4. Merge feature branch into master/main branch
		Merge the pull request
		Add a useful comment on the code and resolve any conflicts

To update local repository with GitHub repository
	git fetch origin

Best Practices
	Dont git checkout master

To revert changes
	git reset <hash> (as shown in the versioning log)


 




  
	
	



	